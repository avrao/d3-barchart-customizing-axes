(function (d3$1) {
  'use strict';

  const svg = d3.select("svg");

  const width = svg.attr("width");
  const height = svg.attr("height");



  const render = data => {
    const xValue = d => d.population;
    const yValue = d => d.Country;  
    
    const margin = {top: 80, right: 40, bottom: 90, left: 180};
    
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3.scaleLinear()
    			.domain([0, d3.max(data, d => xValue(d))])
    			.range([0, innerWidth]); 
    
    const xAxisTickFormat = number => d3$1.format('.3s')(number)
    																	.replace("G", "B");
  	const xAxis = d3.axisBottom(xScale)
    								.tickFormat(xAxisTickFormat)
    								.tickSize(-innerHeight);
    
    const yScale = d3.scaleBand()
    			.domain(data.map(d => yValue(d)))
    			.range([0, innerHeight])
    			.padding(0.2);
    
    const g = svg.append("g")
    						.attr("transform",`translate(${margin.left}, ${margin.top})`);
    
    const yAxisG = g.append("g")
      .call(d3.axisLeft(yScale))
    	.selectAll(".domain, .tick line")
    		.remove();
    
    const xAxisG = g.append("g")
      .call(xAxis)
    		.attr('transform', `translate(0, ${innerHeight})`);
    
    xAxisG.select(".domain").remove();
    
    xAxisG.append("text")
    		.attr("class", "axis-lable")
    		.attr("y",65)
    		.attr("x", innerWidth / 2)
    		.text("Population");
    							
    
  	g.selectAll('rect').data(data)
    	.enter().append('rect')
    		.attr("y", d => yScale(yValue(d)))
    		.attr("width", d => xScale(xValue(d)))
    		.attr("height", yScale.bandwidth());
    
    g.append("text")
    	.attr("class", "title")
    	.text("Top 10 Most Populous Countries");
  };

  d3.csv('data.csv').then(data => {
  	data.forEach(d => {d.population = +d.population * 1000;});  
  	render(data);
    
    
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdGZvcm1hdFxufSBmcm9tICdkMyc7XG5cbmNvbnN0IHN2ZyA9IGQzLnNlbGVjdChcInN2Z1wiKTtcblxuY29uc3Qgd2lkdGggPSBzdmcuYXR0cihcIndpZHRoXCIpO1xuY29uc3QgaGVpZ2h0ID0gc3ZnLmF0dHIoXCJoZWlnaHRcIik7XG5cblxuXG5jb25zdCByZW5kZXIgPSBkYXRhID0+IHtcbiAgY29uc3QgeFZhbHVlID0gZCA9PiBkLnBvcHVsYXRpb247XG4gIGNvbnN0IHlWYWx1ZSA9IGQgPT4gZC5Db3VudHJ5OyAgXG4gIFxuICBjb25zdCBtYXJnaW4gPSB7dG9wOiA4MCwgcmlnaHQ6IDQwLCBib3R0b206IDkwLCBsZWZ0OiAxODB9O1xuICBcbiAgY29uc3QgaW5uZXJXaWR0aCA9IHdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIGNvbnN0IGlubmVySGVpZ2h0ID0gaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gIFxuICBjb25zdCB4U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gIFx0XHRcdC5kb21haW4oWzAsIGQzLm1heChkYXRhLCBkID0+IHhWYWx1ZShkKSldKVxuICBcdFx0XHQucmFuZ2UoWzAsIGlubmVyV2lkdGhdKTsgXG4gIFxuICBjb25zdCB4QXhpc1RpY2tGb3JtYXQgPSBudW1iZXIgPT4gZm9ybWF0KCcuM3MnKShudW1iZXIpXG4gIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQucmVwbGFjZShcIkdcIiwgXCJCXCIpO1xuXHRjb25zdCB4QXhpcyA9IGQzLmF4aXNCb3R0b20oeFNjYWxlKVxuICBcdFx0XHRcdFx0XHRcdFx0LnRpY2tGb3JtYXQoeEF4aXNUaWNrRm9ybWF0KVxuICBcdFx0XHRcdFx0XHRcdFx0LnRpY2tTaXplKC1pbm5lckhlaWdodCk7XG4gIFxuICBjb25zdCB5U2NhbGUgPSBkMy5zY2FsZUJhbmQoKVxuICBcdFx0XHQuZG9tYWluKGRhdGEubWFwKGQgPT4geVZhbHVlKGQpKSlcbiAgXHRcdFx0LnJhbmdlKFswLCBpbm5lckhlaWdodF0pXG4gIFx0XHRcdC5wYWRkaW5nKDAuMik7XG4gIFxuICBjb25zdCBnID0gc3ZnLmFwcGVuZChcImdcIilcbiAgXHRcdFx0XHRcdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIixgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi50b3B9KWApO1xuICBcbiAgY29uc3QgeUF4aXNHID0gZy5hcHBlbmQoXCJnXCIpXG4gICAgLmNhbGwoZDMuYXhpc0xlZnQoeVNjYWxlKSlcbiAgXHQuc2VsZWN0QWxsKFwiLmRvbWFpbiwgLnRpY2sgbGluZVwiKVxuICBcdFx0LnJlbW92ZSgpO1xuICBcbiAgY29uc3QgeEF4aXNHID0gZy5hcHBlbmQoXCJnXCIpXG4gICAgLmNhbGwoeEF4aXMpXG4gIFx0XHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCAke2lubmVySGVpZ2h0fSlgKTtcbiAgXG4gIHhBeGlzRy5zZWxlY3QoXCIuZG9tYWluXCIpLnJlbW92ZSgpO1xuICBcbiAgeEF4aXNHLmFwcGVuZChcInRleHRcIilcbiAgXHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJheGlzLWxhYmxlXCIpXG4gIFx0XHQuYXR0cihcInlcIiw2NSlcbiAgXHRcdC5hdHRyKFwieFwiLCBpbm5lcldpZHRoIC8gMilcbiAgXHRcdC50ZXh0KFwiUG9wdWxhdGlvblwiKTtcbiAgXHRcdFx0XHRcdFx0XHRcbiAgXG5cdGcuc2VsZWN0QWxsKCdyZWN0JykuZGF0YShkYXRhKVxuICBcdC5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gIFx0XHQuYXR0cihcInlcIiwgZCA9PiB5U2NhbGUoeVZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKFwid2lkdGhcIiwgZCA9PiB4U2NhbGUoeFZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKFwiaGVpZ2h0XCIsIHlTY2FsZS5iYW5kd2lkdGgoKSk7XG4gIFxuICBnLmFwcGVuZChcInRleHRcIilcbiAgXHQuYXR0cihcImNsYXNzXCIsIFwidGl0bGVcIilcbiAgXHQudGV4dChcIlRvcCAxMCBNb3N0IFBvcHVsb3VzIENvdW50cmllc1wiKTtcbn07XG5cbmQzLmNzdignZGF0YS5jc3YnKS50aGVuKGRhdGEgPT4ge1xuXHRkYXRhLmZvckVhY2goZCA9PiB7ZC5wb3B1bGF0aW9uID0gK2QucG9wdWxhdGlvbiAqIDEwMDB9KTsgIFxuXHRyZW5kZXIoZGF0YSk7XG4gIFxuICBcbn0pO1xuXG5cbiJdLCJuYW1lcyI6WyJmb3JtYXQiXSwibWFwcGluZ3MiOiI7OztFQUlBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7O0VBRTdCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDaEMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7OztFQUlsQyxNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUk7SUFDckIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDakMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUM7O0lBRTlCLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDOztJQUUzRCxNQUFNLFVBQVUsR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3RELE1BQU0sV0FBVyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7O0lBRXhELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVB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